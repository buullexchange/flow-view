class f extends HTMLElement{static customElementName="fv-canvas";constructor(){super();const t=document.createElement("template");t.innerHTML="<style>:host { --fv-shadow-color: rgba(0, 0, 0, 0.17); display: block; overflow: hidden; background-color: var(--fv-canvas-background-color, #fefefe); box-shadow: 1px 1px 7px 1px var(--fv-shadow-color); width: 100%; height: 100%; position: relative; } :host([hidden]) { display: none; } </style> <svg></svg> <slot></slot>",this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}}export{f as FlowViewCanvas};class a extends HTMLElement{static generateId(t="fv"){const e=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,5),i=`${t}:${e}`;return document.getElementById(i)?a.generateId(t):i}connectedCallback(){const t=this.id||a.generateId();Object.defineProperty(this,"_id",{value:t,writable:!1}),this.setAttribute("id",t)}}const h=10;function b(o){const{parentNode:t}=o;return t&&t.tagName==="DIV"?t.slot==="inputs":!1}function m(o){const{parentNode:t}=o;return t&&t.tagName==="DIV"?t.slot==="outputs":!1}function l(o){const t=u(o),e=Math.round(10/2);if(t){const i=Number(t.getAttribute("x")),n=Number(t.getAttribute("y")),s=1;if(b(o))return{x:i+e,y:n+e};if(m(o)){const r=Number(t.getAttribute("height"));return{y:n+r-e-1,x:i+e+1}}}}function u(o){const{parentNode:t}=o;if(t&&t.tagName==="DIV"&&["inputs","outputs"].includes(t.slot)){const e=t.parentNode;if(e.tagName==="FV-NODE")return e}}class g extends HTMLElement{static customElementName="fv-pin";constructor(){super();const t=document.createElement("template");t.innerHTML=`<style> :host { background-color: var(--fv-pin-background-color, #dbdbdb); display: block; width: ${h}px; height: ${h}px; } </style> <slot></slot>`,this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}static get observedAttributes(){return["id"]}attributeChangedCallback(t,e,i){if(e!==i)switch(t){case"id":{e!==null&&i!==this._id&&this.setAttribute("id",this._id);break}}}connectedCallback(){const{node:t}=this;if(t){this.addEventListener("pointerdown",this.onpointerdown);const e=t.id,i=this.id||a.generateId(e);Object.defineProperty(this,"_id",{value:i,writable:!1}),this.setAttribute("id",i)}}disconnectedCallback(){const{node:t}=this;t&&this.removeEventListener("pointerdown",this.onpointerdown)}onpointerdown(t){t.stopPropagation()}get node(){return u(this)}}export{h as pinSize};export{b as isInput};export{m as isOutput};export{l as centerOfPin};export{u as nodeOfPin};export{g as FlowViewPin};class v extends a{static customElementName="fv-link";constructor(){super();const t=document.createElement("template");t.innerHTML="<style> :host { display: inline-block; position: absolute; border: 1px solid transparent; } :host(:hover) { border-color: var(--fv-shadow-color); } </style> <slot></slot>",this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}static get observedAttributes(){return["id","from","to"]}attributeChangedCallback(t,e,i){if(e!==i)switch(t){case"id":{e!==null&&i!==this._id&&this.setAttribute("id",this._id);break}case"from":case"to":{const n=document.getElementById(t==="from"?i:this.getAttribute("from")),s=document.getElementById(t==="to"?i:this.getAttribute("to")),r=this.computeDimensions({sourcePin:n,targetPin:s});r&&(this.style.width=`${r.width}px`,this.style.height=`${r.height}px`);const c=this.computePosition({sourcePin:n});c&&(this.style.top=`${c.y}px`,this.style.left=`${c.x}px`);break}}}get canvas(){const{parentNode:t}=this;return t&&t.tagName==="FV-CANVAS"?t:null}computeDimensions({sourcePin:t,targetPin:e}){const i=l(t),n=l(e);if(i&&n)return{width:n.x-i.x,height:n.y-i.y}}computePosition({sourcePin:t}){return l(t)}}export{v as FlowViewLink};class x extends a{static customElementName="fv-node";constructor(){super();const t=document.createElement("template");t.innerHTML=`<style> :host { box-sizing: border-box; background-color: var(--fv-node-background-color, #fefefe); position: absolute; box-shadow: 1px 1px 7px 1px var(--fv-shadow-color); display: flex; flex-direction: column; justify-content: space-between; border: 1px solid transparent; } ::slotted(div[slot="inputs"]), ::slotted(div[slot="outputs"]) { display: flex; flex-direction: row; justify-content: space-between; } </style> <slot name="inputs"></slot> <div>${this.label}</div> <slot></slot> <slot name="outputs"></slot>`,this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}static get observedAttributes(){return["x","y","width","height","label","id"]}attributeChangedCallback(t,e,i){if(e!==i)switch(t){case"label":{this.label=i;break}case"id":{e!==null&&i!==this._id&&this.setAttribute("id",this._id);break}case"y":case"x":{const n=Math.round(i);typeof n=="number"&&(t==="y"&&(this.style.top=`${n}px`),t==="x"&&(this.style.left=`${n}px`));break}case"width":case"height":{const n=Math.round(i),{minSize:s}=this;typeof n=="number"&&n>=0&&(typeof s=="number"&&s>n?this.setAttribute(t,s):this.style[t]=`${n}px`);break}}}connectedCallback(){const{canvas:t,minSize:e}=this;t&&this.addEventListener("pointerdown",this.onpointerdown),this.getAttribute("width")||this.setAttribute("width",e),this.getAttribute("height")||this.setAttribute("height",e),this.getAttribute("x")||this.setAttribute("x",0),this.getAttribute("y")||this.setAttribute("y",0)}disconnectedCallback(){const{canvas:t}=this;t&&this.removeEventListener("pointerdown",this.onpointerdown)}onpointerdown(t){const{clientX:e,clientY:i}=t,{canvas:n}=this,{left:s,top:r}=this.getBoundingClientRect(),c=e-s,y=i-r,p=A=>{const{pageX:E,pageY:N}=A;this.setAttribute("x",Math.round(E-c)),this.setAttribute("y",Math.round(N-y))},d=()=>{n.removeEventListener("pointermove",p),n.removeEventListener("pointerleave",d),n.removeEventListener("pointerup",d)};n.addEventListener("pointermove",p),n.addEventListener("pointerleave",d),n.addEventListener("pointerup",d)}get canvas(){const{parentNode:t}=this;return t&&t.tagName==="FV-CANVAS"?t:null}get minSize(){const{canvas:t}=this;return t?t.pinSize*4:sizeOfPin}get label(){return this.getAttribute("label")||""}set label(t){this.setAttribute("label",t)}}export{x as FlowViewNode};const w=[f,v,x,g];function k(o=w){o.forEach(t=>{const{customElementName:e}=t;customElements.get(e)?console.error(`Custom element already defined: ${e}`):customElements.define(e,t)})}export{w as flowViewElements};export{k as flowViewInit};
