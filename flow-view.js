class l extends HTMLElement{static customElementName="fv-canvas";constructor(){super();const t=document.createElement("template");t.innerHTML="<style>:host { --fv-shadow-color: rgba(0, 0, 0, 0.17); display: block; overflow: hidden; background-color: var(--fv-canvas-background-color, #fefefe); box-shadow: 1px 1px 7px 1px var(--fv-shadow-color); width: 100%; height: 100%; position: relative; } :host([hidden]) { display: none; } </style> <svg></svg> <slot></slot>",this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}}export{l as FlowViewCanvas};class c extends HTMLElement{static customElementName="fv-node";constructor(){super();const t=document.createElement("template");t.innerHTML=`<style> :host { box-sizing: border-box; background-color: var(--fv-node-background-color, #fefefe); position: absolute; box-shadow: 1px 1px 7px 1px var(--fv-shadow-color); display: flex; flex-direction: column; justify-content: space-between; border: 1px solid transparent; } ::slotted(div[slot="inputs"]), ::slotted(div[slot="outputs"]) { display: flex; flex-direction: row; justify-content: space-between; } </style> <slot name="inputs"></slot> <div>${this.label}</div> <slot></slot> <slot name="outputs"></slot>`,this.attachShadow({mode:"open"}).appendChild(t.content.cloneNode(!0))}static get observedAttributes(){return["x","y","width","height","label","id"]}attributeChangedCallback(t,s,i){if(s!==i)switch(t){case"label":{this.label=i;break}case"id":{s!==null&&i!==this._id&&this.setAttribute("id",this._id);break}case"y":case"x":{const e=Math.round(i);typeof e=="number"&&(t==="y"&&(this.style.top=`${e}px`),t==="x"&&(this.style.left=`${e}px`));break}case"width":case"height":{const e=Math.round(i),{minSize:o}=this;typeof e=="number"&&e>=0&&(typeof o=="number"&&o>e?this.setAttribute(t,o):this.style[t]=`${e}px`);break}}}connectedCallback(){const{canvas:t,minSize:s}=this;if(t){this.addEventListener("pointerdown",this.onpointerdown);const i=this.id||t.generateId();Object.defineProperty(this,"_id",{value:i,writable:!1}),this.setAttribute("id",i)}this.getAttribute("width")||this.setAttribute("width",s),this.getAttribute("height")||this.setAttribute("height",s),this.getAttribute("x")||this.setAttribute("x",0),this.getAttribute("y")||this.setAttribute("y",0)}disconnectedCallback(){const{canvas:t}=this;t&&this.removeEventListener("pointerdown",this.onpointerdown)}onpointerdown(t){const{clientX:s,clientY:i}=t,{canvas:e}=this,{left:o,top:h}=this.getBoundingClientRect(),p=s-o,u=i-h,a=f=>{const{pageX:b,pageY:v}=f;this.setAttribute("x",Math.round(b-p)),this.setAttribute("y",Math.round(v-u))},n=()=>{e.removeEventListener("pointermove",a),e.removeEventListener("pointerleave",n),e.removeEventListener("pointerup",n)};e.addEventListener("pointermove",a),e.addEventListener("pointerleave",n),e.addEventListener("pointerup",n)}get canvas(){const{parentNode:t}=this;return t&&t.tagName==="FV-CANVAS"?t:null}get minSize(){const{canvas:t}=this;return t?t.pinSize*4:sizeOfPin}get label(){return this.getAttribute("label")||""}set label(t){this.setAttribute("label",t)}}export{c as FlowViewNode};const d=[l,c];function m(r=d){r.forEach(t=>{const{customElementName:s}=t;customElements.get(s)?console.error(`Custom element already defined: ${s}`):customElements.define(s,t)})}export{d as flowViewElements};export{m as flowViewInit};
