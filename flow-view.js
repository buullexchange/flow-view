class r{static generateId(e){const t=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,5);return e.getElementById(t)?r.generateId(e):t}constructor({cssClassName:e,id:t,shadowDom:s,...n}){this.shadowDom=s;const i=this.element=document.createElement("div");i.classList.add(e);const a=t||r.generateId(s);i.setAttribute("id",a),s.appendChild(i),this.init(n)}init(){}createDiv(e){const t=document.createElement("div");return t.classList.add(e),this.element.appendChild(t),t}}export{r as FlowViewBase};class d extends r{static cssClassName="fv-edge";static width=2;static style={[`.${d.cssClassName}`]:{display:"inline-block",position:"absolute"},[`.${d.cssClassName} line`]:{stroke:"var(--fv-connection-color)","stroke-width":d.width},[`.${d.cssClassName} line:hover`]:{stroke:"var(--fv-highlighted-connection-color)"}}}export{d as FlowViewEdge};class o extends r{static cssClassName="fv-pin";static size=10;static style={[`.${o.cssClassName}`]:{"background-color":"var(--fv-connection-color)",display:"block",width:`${o.size}px`,height:`${o.size}px`}}}export{o as FlowViewPin};class c extends r{static cssClassName="fv-node";static minSize=o.size*4;static style={[`.${c.cssClassName}`]:{position:"absolute","background-color":"var(--fv-node-background-color, #fefefe)","box-shadow":"var(--fv-box-shadow)",display:"flex","flex-direction":"column","justify-content":"space-between",border:"1px solid transparent","min-height":`${c.minSize}px`,"min-width":`${c.minSize}px`,width:"fit-content"},[`.${c.cssClassName} .label`]:{"user-select":"none","padding-left":"0.5em","padding-right":"0.5em"},[`.${c.cssClassName} .pins`]:{display:"flex","flex-direction":"row","justify-content":"space-between",height:`${o.size}px`}};init({label:e,inputs:t=[],outputs:s=[],x:n,y:i}){this.inputs=new Map,this.inputListElement=this.createDiv("pins");for(const a of t)this.newInput(a);this.labelElement=this.createDiv("label"),this.label=e,this.outputs=new Map,this.outputListElement=this.createDiv("pins");for(const a of s)this.newOutput(a);this.position={x:n,y:i}}get label(){return this.labelElement.textContent}set label(e){this.labelElement.textContent=e}set position({x:e=0,y:t=0}={}){const{element:s}=this;s.style.top=`${e}px`,s.style.left=`${t}px`}newInput({id:e}){const t=new o({id:e,shadowDom:this.shadowDom,cssClassName:o.cssClassName});this.inputs.set(t.id,t),this.inputListElement.appendChild(t.element)}newOutput({id:e}){const t=new o({id:e,shadowDom:this.shadowDom,cssClassName:o.cssClassName});this.outputs.set(t.id,t),this.outputListElement.appendChild(t.element)}}export{c as FlowViewNode};class l extends HTMLElement{static customElementName="flow-view";static minHeight=200;static style={":host([hidden])":{display:"none"},":host":{"--fv-box-shadow":"0px 0px 7px 1px rgba(0, 0, 0, 0.1)","--fv-connection-color":"#ccc",position:"relative",display:"block",overflow:"hidden",border:0,margin:0,"background-color":"var(--fv-canvas-background-color, #fefefe)","box-shadow":"var(--fv-box-shadow)","font-family":"var(--fv-font-family, sans-serif)","font-size":"var(--fv-font-size, 17px)",color:"var(--fv-text-color, #111)"},...d.style,...c.style,...o.style};static generateStylesheet(e){return Object.entries(e).reduce((t,[s,n])=>[t,`${s} {`,Object.entries(n).map(([i,a])=>`  ${i}: ${a};`).join(`
`),"}"].join(`
`),"")}constructor(){super();const e=document.createElement("template");e.innerHTML=`<style>${l.generateStylesheet(l.style)}</style>`,this.attachShadow({mode:"open"}).appendChild(e.content.cloneNode(!0))}connectedCallback(){this.canResize?(this.rootResizeObserver=new ResizeObserver(this.onRootResize.bind(this)),this.rootResizeObserver.observe(this.parentNode)):this.height=this.getAttribute("height")||l.minHeight}disconnectedCallback(){}get canResize(){return"ResizeObserver"in window}set width(e){this.style.width=`${e}px`}set height(e){this.style.height=`${e}px`}onRootResize(e){for(const t of e){const s=Array.isArray(t.contentBoxSize)?t.contentBoxSize[0]:t.contentBoxSize;this.width=s.inlineSize,this.height=s.blockSize-10}}}class h{static defaultItems={node:c};static defineCustomElement(){const{customElementName:e}=l;window.customElements.get(e)||window.customElements.define(e,l)}constructor({container:e,element:t}={}){h.defineCustomElement();const s=this.itemClass=new Map;Object.entries(h.defaultItems).forEach(([n,i])=>{s.set(n,i)}),t instanceof l?this.view=t:(this.view=document.createElement(l.customElementName),t.parentNode||(e instanceof HTMLElement?e.appendChild(t):document.body.appendChild(t))),this.nodes=new Map,this.edges=new Map}connect(e,t=0){return{to:(s,n)=>{const i=e.output(t);element.classList.add(className);const a=s.input(n);return this.newEdge({from:[e.id,i.id].join(),to:[s.id,a.id].join()})}}}loadGraph({nodes:e=[],edges:t=[]}){if(!Array.isArray(e)||!Array.isArray(t))throw new TypeError("Invalid graph");for(const s of e)this.newNode(s);for(const s of t)this.newEdge(s)}newEdge({from:e,to:t}){const s=this.itemClass.get("edge");return new s({id,shadowDom:this.view.shadowRoot,cssClassName:s.cssClassName,from:e,to:t})}newNode({x:e=0,y:t=0,label:s="node",id:n,nodeType:i="node",inputs:a=[],outputs:m=[]}={}){const p=this.itemClass.get(i);return new p({id:n,shadowDom:this.view.shadowRoot,cssClassName:p.cssClassName,label:s,inputs:a,outputs:m,x:e,y:t})}}export{l as FlowViewElement};export{h as FlowView};
