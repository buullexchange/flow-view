class o extends HTMLElement{constructor(t="",e="<slot></slot>"){super();const s=document.createElement("template"),i={":host([hidden])":{display:"none"}};s.innerHTML=`<style>${o.generateStylesheet({...i,...t})}</style>${e}`,this.attachShadow({mode:"open"}).appendChild(s.content.cloneNode(!0))}static get observedAttributes(){return["id"]}static generateStylesheet(t){return Object.entries(t).reduce((e,[s,i])=>[e,`${s} {`,Object.entries(i).map(([n,a])=>`  ${n}: ${a};`).join(`
`),"}"].join(`
`),"")}static generateId(t="fv"){const e=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,5),s=`${t}:${e}`;return document.getElementById(s)?o.generateId(t):s}connectedCallback(){const t=this.id||o.generateId();Object.defineProperty(this,"_id",{value:t,writable:!1}),this.setAttribute("id",t)}attributeChangedCallback(t,e,s){if(e!==s)switch(t){case"id":{e!==null&&s!==this._id&&this.setAttribute("id",this._id);break}}}}class g extends o{static customElementName="fv-canvas";constructor(){super({":host":{"--fv-shadow-color":"rgba(0, 0, 0, 0.17)",display:"block",overflow:"hidden","background-color":"var(--fv-canvas-background-color, #fefefe)","box-shadow":"1px 1px 7px 1px var(--fv-shadow-color)",width:"100%",height:"100%",position:"relative"}})}static get observedAttributes(){return o.observedAttributes}}export{g as FlowViewCanvas};const w=10;class r extends o{static customElementName="fv-pin";static size=10;constructor(){super({":host":{"background-color":"var(--fv-pin-background-color, #dbdbdb)",display:"block",width:`${r.size}px`,height:`${r.size}px`}})}static get observedAttributes(){return o.observedAttributes}static centerOfPin(t){const e=r.nodeOfPin(t),s=Math.round(r.size/2);if(e){const i=Number(e.getAttribute("x")),n=Number(e.getAttribute("y")),a=1;if(r.isInput(t))return{x:i+s,y:n+s};if(r.isOutput(t)){const d=Number(e.getAttribute("height"));return{y:n+d-s-1,x:i+s+1}}}}static isInput(t){const{parentNode:e}=t;return e&&e.tagName==="DIV"?e.slot==="inputs":!1}static isOutput(t){const{parentNode:e}=t;return e&&e.tagName==="DIV"?e.slot==="outputs":!1}static nodeOfPin(t){const{parentNode:e}=t;if(e&&e.tagName==="DIV"&&["inputs","outputs"].includes(e.slot)){const s=e.parentNode;if(s.tagName==="FV-NODE")return s}}attributeChangedCallback(t,e,s){if(super.attributeChangedCallback(t,e,s),e!==s)switch(t){case"id":{e!==null&&s!==this._id&&this.setAttribute("id",this._id);break}}}connectedCallback(){const{node:t}=this;if(t){this.addEventListener("pointerdown",this.onpointerdown);const e=t.id,s=this.id||o.generateId(e);Object.defineProperty(this,"_id",{value:s,writable:!1}),this.setAttribute("id",s)}}disconnectedCallback(){const{node:t}=this;t&&this.removeEventListener("pointerdown",this.onpointerdown)}onpointerdown(t){t.stopPropagation()}get node(){return r.nodeOfPin(this)}}export{w as pinSize};export{r as FlowViewPin};class v extends o{static customElementName="fv-link";constructor(){super({":host":{display:"inline-block",position:"absolute",border:"1px solid transparent"},":host(:hover)":{"border-color":"var(--fv-shadow-color)"},line:{stroke:"var(--fv-link-color, #1c1c1c)","stroke-width":1}},"<slot><svg><line></line></svg></slot>")}static get observedAttributes(){return o.observedAttributes.concat(["from","to"])}attributeChangedCallback(t,e,s){if(e!==s){switch(super.attributeChangedCallback(t,e,s),t){case"from":{this.sourcePin=document.getElementById(s);break}case"to":{this.targetPin=document.getElementById(s);break}}["from","to"].includes(t)&&this.updateGeometry()}}get canvas(){const{parentNode:t}=this;return t&&t.tagName==="FV-CANVAS"?t:null}set dimension([t,e]){const{style:s,svg:i}=this;s.width=`${t}px`,s.height=`${e}px`,i.setAttribute("width",t),i.setAttribute("height",e)}get line(){return this.shadowRoot.querySelector("line")}set position([t,e]){this.style.top=`${e}px`,this.style.left=`${t}px`}get svg(){return this.shadowRoot.querySelector("svg")}updateGeometry(){const{line:t,sourcePin:e,targetPin:s}=this;if(!(e&&s)){this.position=[0,0],this.dimension=[0,0];return}const i=r.centerOfPin(e),n=r.centerOfPin(s),a=n.x<i.x,d=n.y<i.y,b=a?n.x:i.x,h=d?n.y:i.y;this.position=[b,h];const c=Math.abs(n.x-i.x),l=Math.abs(n.y-i.y);this.dimension=[c,l];const p=a?c:0,f=d?l:0,y=a?0:c,A=d?0:l;t.setAttribute("x1",p),t.setAttribute("y1",f),t.setAttribute("x2",y),t.setAttribute("y2",A)}}export{v as FlowViewLink};class m extends o{static customElementName="fv-node";constructor(){super({":host":{"box-sizing":"border-box","background-color":"var(--fv-node-background-color, #fefefe)",position:"absolute","box-shadow":"1px 1px 7px 1px var(--fv-shadow-color)",display:"flex","flex-direction":"column","justify-content":"space-between",border:"1px solid transparent"},'::slotted(div[slot="inputs"]), ::slotted(div[slot="outputs"])':{display:"flex","flex-direction":"row","justify-content":"space-between"}},'<slot name="inputs"></slot> <div class="label">node</div> <slot></slot> <slot name="outputs"></slot>')}static get observedAttributes(){return o.observedAttributes.concat(["label","x","y","width","height"])}attributeChangedCallback(t,e,s){if(e!==s)switch(super.attributeChangedCallback(t,e,s),t){case"label":{this.label=s;break}case"y":case"x":{const i=Math.round(s);typeof i=="number"&&(t==="y"&&(this.style.top=`${i}px`),t==="x"&&(this.style.left=`${i}px`));break}case"width":case"height":{const i=Math.round(s),{minSize:n}=this;typeof i=="number"&&i>=0&&(typeof n=="number"&&n>i?this.setAttribute(t,n):this.style[t]=`${i}px`);break}}}connectedCallback(){const{canvas:t,minSize:e}=this;t&&this.addEventListener("pointerdown",this.onpointerdown),this.getAttribute("width")||this.setAttribute("width",e),this.getAttribute("height")||this.setAttribute("height",e),this.getAttribute("x")||this.setAttribute("x",0),this.getAttribute("y")||this.setAttribute("y",0)}disconnectedCallback(){const{canvas:t}=this;t&&this.removeEventListener("pointerdown",this.onpointerdown)}onpointerdown(t){const{clientX:e,clientY:s}=t,{canvas:i}=this,{left:n,top:a}=this.getBoundingClientRect(),d=e-n,b=s-a,h=l=>{const{pageX:p,pageY:f}=l;this.setAttribute("x",Math.round(p-d)),this.setAttribute("y",Math.round(f-b))},c=()=>{i.removeEventListener("pointermove",h),i.removeEventListener("pointerleave",c),i.removeEventListener("pointerup",c)};i.addEventListener("pointermove",h),i.addEventListener("pointerleave",c),i.addEventListener("pointerup",c)}get canvas(){const{parentNode:t}=this;return t&&t.tagName==="FV-CANVAS"?t:null}get minSize(){const{canvas:t}=this;return t?t.pinSize*4:sizeOfPin}set label(t){this.labelNode.textContent=t}get labelNode(){return this.shadowRoot.querySelector(".label")}}export{m as FlowViewNode};const x=[g,v,m,r];function k(u=x){u.forEach(t=>{const{customElementName:e}=t;customElements.get(e)?console.error(`Custom element already defined: ${e}`):customElements.define(e,t)})}export{x as flowViewElements};export{k as flowViewInit};
